#!/usr/bin/env python3
"""
ุงุฎุชุจุงุฑ ููุงุฆู ุดุงูู ููุธุงู ุงููุงุฌุจุงุช ุงูุฌุฏูุฏ
"""

import os
import django
import sys

# ุฅุนุฏุงุฏ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'custom_permissions.settings')
django.setup()

from assignments.models import Assignment, AssignmentQuestion, AssignmentAnswer
from courses.models import Course
from django.contrib.auth.models import User
from assignments.serializers import AssignmentQuestionSerializer, AssignmentAnswerSerializer
import json

def test_complete_assignment_system():
    """ุงุฎุชุจุงุฑ ุดุงูู ููุธุงู ุงููุงุฌุจุงุช"""
    
    print("๐งช ุจุฏุก ุงูุงุฎุชุจุงุฑ ุงูุดุงูู ููุธุงู ุงููุงุฌุจุงุช...")
    print("=" * 60)
    
    # 1. ุงูุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ
    try:
        user = User.objects.get(username='testinstructor1')
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู ุงููุณุชุฎุฏู: {user.username}")
        
        course = Course.objects.get(id=7)
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู ุงูููุฑุณ: {course.title}")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุนุซูุฑ ุนูู ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ: {e}")
        return False
    
    # 2. ุฅูุดุงุก ูุงุฌุจ ุฌุฏูุฏ
    try:
        assignment = Assignment.objects.create(
            title='ูุงุฌุจ ุงุฎุชุจุงุฑ ุงููุธุงู ุงูุฌุฏูุฏ',
            description='ูุงุฌุจ ูุงุฎุชุจุงุฑ ุงููุธุงู ุงูุฌุฏูุฏ ุจุฏูู ุฃุณุฆูุฉ',
            course=course,
            due_date='2024-12-31T23:59:00Z',
            points=100,
            has_questions=True,
            has_file_upload=False,
            is_active=True
        )
        print(f"โ ุชู ุฅูุดุงุก ุงููุงุฌุจ: {assignment.title} (ID: {assignment.id})")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงููุงุฌุจ: {e}")
        return False
    
    # 3. ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฃุณุฆูุฉ
    questions_created = 0
    answers_created = 0
    
    try:
        # ุณุคุงู ุงุฎุชูุงุฑ ูู ูุชุนุฏุฏ
        question1_data = {
            'assignment': assignment.id,
            'text': 'ูุง ูู 2+2ุ',
            'question_type': 'multiple_choice',
            'points': 20,
            'order': 1,
            'is_required': True
        }
        
        serializer1 = AssignmentQuestionSerializer(data=question1_data)
        if serializer1.is_valid():
            question1 = serializer1.save()
            print(f"โ ุชู ุฅูุดุงุก ุงูุณุคุงู 1: {question1.text} (ID: {question1.id})")
            questions_created += 1
            
            # ุฅุฌุงุจุงุช ุงูุณุคุงู ุงูุฃูู
            answers1 = [
                {'question': question1.id, 'text': '3', 'is_correct': False, 'order': 1},
                {'question': question1.id, 'text': '4', 'is_correct': True, 'order': 2},
                {'question': question1.id, 'text': '5', 'is_correct': False, 'order': 3},
            ]
            
            for answer_data in answers1:
                answer_serializer = AssignmentAnswerSerializer(data=answer_data)
                if answer_serializer.is_valid():
                    answer = answer_serializer.save()
                    print(f"  โ ุชู ุฅูุดุงุก ุงูุฅุฌุงุจุฉ: {answer.text} (ุตุญูุญุฉ: {answer.is_correct})")
                    answers_created += 1
                else:
                    print(f"  โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฅุฌุงุจุฉ: {answer_serializer.errors}")
        else:
            print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุณุคุงู 1: {serializer1.errors}")
        
        # ุณุคุงู ุตุญ ุฃู ุฎุทุฃ
        question2_data = {
            'assignment': assignment.id,
            'text': 'ุงูุณูุงุก ุฒุฑูุงุกุ',
            'question_type': 'true_false',
            'points': 15,
            'order': 2,
            'is_required': True
        }
        
        serializer2 = AssignmentQuestionSerializer(data=question2_data)
        if serializer2.is_valid():
            question2 = serializer2.save()
            print(f"โ ุชู ุฅูุดุงุก ุงูุณุคุงู 2: {question2.text} (ID: {question2.id})")
            questions_created += 1
            
            # ุฅุฌุงุจุงุช ุงูุณุคุงู ุงูุซุงูู
            answers2 = [
                {'question': question2.id, 'text': 'ุตุญ', 'is_correct': True, 'order': 1},
                {'question': question2.id, 'text': 'ุฎุทุฃ', 'is_correct': False, 'order': 2},
            ]
            
            for answer_data in answers2:
                answer_serializer = AssignmentAnswerSerializer(data=answer_data)
                if answer_serializer.is_valid():
                    answer = answer_serializer.save()
                    print(f"  โ ุชู ุฅูุดุงุก ุงูุฅุฌุงุจุฉ: {answer.text} (ุตุญูุญุฉ: {answer.is_correct})")
                    answers_created += 1
                else:
                    print(f"  โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฅุฌุงุจุฉ: {answer_serializer.errors}")
        else:
            print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุณุคุงู 2: {serializer2.errors}")
        
        # ุณุคุงู ููุงู
        question3_data = {
            'assignment': assignment.id,
            'text': 'ุงุดุฑุญ ููููู ุงูุชุนูู ุงูุฅููุชุฑููู',
            'question_type': 'essay',
            'points': 30,
            'order': 3,
            'is_required': True
        }
        
        serializer3 = AssignmentQuestionSerializer(data=question3_data)
        if serializer3.is_valid():
            question3 = serializer3.save()
            print(f"โ ุชู ุฅูุดุงุก ุงูุณุคุงู 3: {question3.text} (ID: {question3.id})")
            questions_created += 1
        else:
            print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุณุคุงู 3: {serializer3.errors}")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุฃุณุฆูุฉ: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 4. ุงูุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    try:
        questions_count = AssignmentQuestion.objects.filter(assignment=assignment).count()
        answers_count = AssignmentAnswer.objects.filter(question__assignment=assignment).count()
        
        print("\n๐ ุฅุญุตุงุฆูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:")
        print(f"   - ุนุฏุฏ ุงูุฃุณุฆูุฉ ูู ุงููุงุฌุจ: {questions_count}")
        print(f"   - ุนุฏุฏ ุงูุฅุฌุงุจุงุช ูู ุงููุงุฌุจ: {answers_count}")
        print(f"   - ุงูุฃุณุฆูุฉ ุงููููุดุฃุฉ: {questions_created}")
        print(f"   - ุงูุฅุฌุงุจุงุช ุงููููุดุฃุฉ: {answers_created}")
        
        if questions_count == questions_created and answers_count == answers_created:
            print("โ ุฌููุน ุงูุจูุงูุงุช ูุญููุธุฉ ุจุดูู ุตุญูุญ!")
        else:
            print("โ ููุงู ูุดููุฉ ูู ุญูุธ ุงูุจูุงูุงุช!")
            return False
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุชุญูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        return False
    
    # 5. ุงุฎุชุจุงุฑ ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช
    try:
        print("\n๐ ุงุฎุชุจุงุฑ ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช:")
        
        # ุงุณุชุฑุฌุงุน ุงูุฃุณุฆูุฉ
        questions = AssignmentQuestion.objects.filter(assignment=assignment).order_by('order')
        print(f"   - ุชู ุงุณุชุฑุฌุงุน {questions.count()} ุณุคุงู")
        
        for q in questions:
            print(f"     * {q.text} ({q.question_type}) - {q.points} ููุทุฉ")
            answers = AssignmentAnswer.objects.filter(question=q)
            if answers.exists():
                print(f"       - {answers.count()} ุฅุฌุงุจุฉ:")
                for a in answers:
                    print(f"         > {a.text} (ุตุญูุญุฉ: {a.is_correct})")
            else:
                print("       - ุจุฏูู ุฅุฌุงุจุงุช")
        
        print("โ ุชู ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช ุจูุฌุงุญ!")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช: {e}")
        return False
    
    # 6. ุชูุธูู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ
    try:
        print("\n๐งน ุชูุธูู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ...")
        assignment.delete()
        print("โ ุชู ุญุฐู ุงููุงุฌุจ ุงูุชุฌุฑูุจู ุจูุฌุงุญ!")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุญุฐู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("๐ ุชู ุงูุงุฎุชุจุงุฑ ุงูุดุงูู ุจูุฌุงุญ!")
    print("โ ูุธุงู ุงููุงุฌุจุงุช ูุนูู ุจุดูู ูุซุงูู")
    print("โ ูููู ุฅูุดุงุก ูุงุฌุจุงุช ุจุฏูู ุฃุณุฆูุฉ")
    print("โ ูููู ุฅุถุงูุฉ ุฃุณุฆูุฉ ูููุตูุฉ")
    print("โ ุงูุฃุณุฆูุฉ ูุงูุฅุฌุงุจุงุช ุชูุญูุธ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
    print("โ ูููู ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช ุจุดูู ุตุญูุญ")
    
    return True

if __name__ == '__main__':
    success = test_complete_assignment_system()
    if success:
        print("\n๐ ุงููุธุงู ุฌุงูุฒ ููุงุณุชุฎุฏุงู!")
    else:
        print("\n๐ฅ ููุงู ูุดุงูู ูู ุงููุธุงู. ูุฑุฌู ูุฑุงุฌุนุชูุง.")
        sys.exit(1)
